#!/usr/bin/env bash

gpg_agent_start()
{
	#sleep 0.$RANDOM # hack to avoid race condition that starts many gpg-agent processes
	eval `${GPG_AGENT_BIN} --daemon --write-env-file --use-standard-socket --default-cache-ttl 60 --max-cache-ttl 120 --enable-ssh-support --pinentry-program=${GPG_PINENTRY_PROGRAM}`
}

gpg_agent_pid()
{
	test -f ${GPG_AGENT_INFO_FILE} || return 1
	echo `head -1 ${GPG_AGENT_INFO_FILE} | cut -d : -f2`
}

case `uname -s` in
	Darwin)
		GPG_PINENTRY_PROGRAM=`which pinentry-mac`
		GPG_AGENT_BIN=`which gpg-agent`
		GPG_AGENT_INFO_FILE=$HOME/.gpg-agent-info
		gpg_agent_start
		SSH_AUTH_SOCK=$HOME/.gnupg/S.gpg-agent.ssh
		;;

	FreeBSD|Linux)
		GPG_PINENTRY_PROGRAM=`which pinentry-gtk-2`
		GPG_AGENT_BIN=`which gpg-agent`
		GPG_AGENT_INFO_FILE=$HOME/.gpg-agent-info

		# start gpg agent if we can't get the pid
		GPG_AGENT_PID=`gpg_agent_pid`
		if [ -z "${GPG_AGENT_PID}" ];then
			gpg_agent_start
		fi

		# try reading gpg info file
		source ${GPG_AGENT_INFO_FILE}

		# check if gpg is still running from old file, if not start it again
		GPG_AGENT_PID=`gpg_agent_pid`
		if ! kill -0 ${GPG_AGENT_PID} 2>/dev/null; then
			gpg_agent_start
		fi

		;;
esac

# export variables to environment
export GPG_AGENT_INFO
export SSH_AUTH_SOCK
export SSH_AGENT_PID
export GPG_TTY=`tty`
